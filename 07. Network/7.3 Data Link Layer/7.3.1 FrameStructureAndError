# 프레임 구조와 오류 검출/정정

## 1. 프레임 구조 (Frame Structure)

### 기본 프레임 구조

데이터 링크 계층에서 전송되는 데이터 단위를 **프레임(Frame)** 이라고 한다.

```
┌──────────┬────────┬──────────┬─────────────────┬──────────┐
│시작 플래그 │  헤더  │  데이터   │  오류 검출 코드   │ 끝 플래그 │
│  (Flag)  │(Header)│  (Data)  │(Error Detection)│ (Flag)   │
└──────────┴────────┴──────────┴─────────────────┴──────────┘
```

### 각 필드의 역할

**1. 시작/끝 플래그 (Flag)**

- 프레임의 경계를 표시
- 일반적으로 `01111110` (0x7E) 사용
- 수신자가 프레임의 시작과 끝을 인식

**2. 헤더 (Header)**

- 목적지 주소 (Destination Address)
- 출발지 주소 (Source Address)
- 제어 정보 (Control Information)
- 프레임 타입 정보

**3. 데이터 (Data/Payload)**

- 상위 계층에서 전달받은 실제 데이터
- 네트워크 계층의 패킷이 포함됨

**4. 오류 검출 코드**

- CRC (Cyclic Redundancy Check)
- 체크섬 (Checksum)
- 패리티 비트 등

## 2. 오류 검출 (Error Detection)

### 오류 발생 원인

- **열잡음 (Thermal Noise)**: 전자 소자의 열 운동
- **임펄스 잡음**: 갑작스러운 전기적 간섭
- **크로스토크**: 인접한 전송 선로 간의 간섭
- **감쇠**: 신호의 세기가 거리에 따라 약해짐

### 주요 오류 검출 방법

#### `1. 패리티 검사 (Parity Check)`

**단순 패리티**

- 짝수 패리티: 1의 개수가 짝수가 되도록 패리티 비트 추가
- 홀수 패리티: 1의 개수가 홀수가 되도록 패리티 비트 추가

```
데이터: 1011010
짝수 패리티: 10110100 (패리티 비트: 0)
홀수 패리티: 10110101 (패리티 비트: 1)
```

**2차원 패리티**

- 데이터를 2차원 배열로 배치
- 각 행과 열에 패리티 비트 추가
- 단일 비트 오류의 위치 파악 가능

#### `2. 체크섬 (Checksum)`

- 데이터를 일정 단위로 나누어 합계 계산
- 송신 시 체크섬 값을 함께 전송
- 수신 시 재계산하여 비교

```
예시:
데이터 블록: 1010, 1100, 1001
합계: 1010 + 1100 + 1001 = 11111
체크섬: 1's complement of 11111 = 00000
```

#### `3. CRC (Cyclic Redundancy Check)`

**가장 강력하고 널리 사용되는 오류 검출 방법**

**동작 원리:**

1. 생성 다항식(Generator Polynomial) 선택
2. 데이터에 0을 추가 (생성 다항식 차수만큼)
3. 다항식 나눗셈 수행
4. 나머지를 CRC 코드로 사용

```
예시: CRC-4 (생성 다항식: x⁴ + x + 1 = 10011)
데이터: 1101
확장 데이터: 11010000
나눗셈 결과 나머지: 1110
전송 데이터: 11011110
```

**CRC 표준들:**

- CRC-8: 8비트, 다항식 x⁸ + x² + x + 1
- CRC-16: 16비트, 다항식 x¹⁶ + x¹⁵ + x² + 1
- CRC-32: 32비트, IEEE 802 표준에서 사용

## 3. 오류 정정 (Error Correction)

### 해밍 코드 (Hamming Code)

**단일 비트 오류 정정 가능**

**동작 원리:**

- 데이터 비트와 패리티 비트를 특정 패턴으로 배치
- 패리티 비트는 2의 거듭제곱 위치 (1, 2, 4, 8, ...)에 배치
- 각 패리티 비트는 특정 데이터 비트들을 검사

```
해밍 코드 예시 (7,4 코드):
위치:  1 2 3 4 5 6 7
내용:  P₁P₂D₁P₃D₂D₃D₄
```

**오류 검출 및 정정:**

1. 수신된 데이터로 신드롬 계산
2. 신드롬 = 0: 오류 없음
3. 신드롬 ≠ 0: 오류 위치 표시, 해당 비트 반전

### 리드-솔로몬 코드 (Reed-Solomon Code)

- **다중 비트 오류 정정 가능**
- CD, DVD, QR 코드 등에서 사용
- 블록 단위로 오류 정정 수행

## 4. 비교

### 오류 검출 vs 오류 정정

| 구분      | 오류 검출     | 오류 정정            |
| --------- | ------------- | -------------------- |
| 목적      | 오류 발견     | 오류 발견 + 수정     |
| 복잡도    | 낮음          | 높음                 |
| 오버헤드  | 적음          | 많음                 |
| 대표 방법 | CRC, 체크섬   | 해밍 코드, RS 코드   |
| 적용 분야 | 유선 네트워크 | 무선 통신, 저장 매체 |
